/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RoomIndexRouteImport } from './routes/room/index'
import { Route as HomeIndexRouteImport } from './routes/_home/index'
import { Route as RoomIdIndexRouteImport } from './routes/room/$id/index'
import { Route as RoomIdAudioRouteImport } from './routes/room/$id/audio'

const RoomIndexRoute = RoomIndexRouteImport.update({
  id: '/room/',
  path: '/room/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/_home/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomIdIndexRoute = RoomIdIndexRouteImport.update({
  id: '/room/$id/',
  path: '/room/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomIdAudioRoute = RoomIdAudioRouteImport.update({
  id: '/room/$id/audio',
  path: '/room/$id/audio',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof HomeIndexRoute
  '/room': typeof RoomIndexRoute
  '/room/$id/audio': typeof RoomIdAudioRoute
  '/room/$id': typeof RoomIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof HomeIndexRoute
  '/room': typeof RoomIndexRoute
  '/room/$id/audio': typeof RoomIdAudioRoute
  '/room/$id': typeof RoomIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_home/': typeof HomeIndexRoute
  '/room/': typeof RoomIndexRoute
  '/room/$id/audio': typeof RoomIdAudioRoute
  '/room/$id/': typeof RoomIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/room' | '/room/$id/audio' | '/room/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/room' | '/room/$id/audio' | '/room/$id'
  id: '__root__' | '/_home/' | '/room/' | '/room/$id/audio' | '/room/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  HomeIndexRoute: typeof HomeIndexRoute
  RoomIndexRoute: typeof RoomIndexRoute
  RoomIdAudioRoute: typeof RoomIdAudioRoute
  RoomIdIndexRoute: typeof RoomIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/room/': {
      id: '/room/'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_home/': {
      id: '/_home/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$id/': {
      id: '/room/$id/'
      path: '/room/$id'
      fullPath: '/room/$id'
      preLoaderRoute: typeof RoomIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$id/audio': {
      id: '/room/$id/audio'
      path: '/room/$id/audio'
      fullPath: '/room/$id/audio'
      preLoaderRoute: typeof RoomIdAudioRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  HomeIndexRoute: HomeIndexRoute,
  RoomIndexRoute: RoomIndexRoute,
  RoomIdAudioRoute: RoomIdAudioRoute,
  RoomIdIndexRoute: RoomIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
